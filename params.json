{"name":"GoEV3","tagline":"LEGO Mindstorms EV3 API for Google Go","body":"GoEV3\r\n=====\r\n\r\nIntroduction\r\n------------\r\n\r\nIn 2013, LEGO introduced its third-generation Mindstorms robotics set, the [EV3](http://en.wikipedia.org/wiki/Lego_Mindstorms_EV3). Unlike its predecessors, the EV3 runs Linux, giving hackers and hobbyists the opportunity to create robots more capable than ever before.\r\n\r\nThe [ev3dev project](https://github.com/mindboards/ev3dev) maintains open source, hacker-friendly releases of EV3's operating system. Distributions include built-in [ssh](http://en.wikipedia.org/wiki/Secure_Shell) support and custom drivers for EV3's hardware. In fact, a simple file system-based interface can be used to interact with EV3's motors, sensors, buttons, and LEDs. Directories under `/sys/class` represent various device classes, and setting attributes is as simple as writing to files.\r\n\r\nFor example, executing the following shell commands will run a motor at 50% speed:\r\n\r\n\techo  50 > /sys/class/tacho-motor/outA:motor:tacho/speed_setpoint\r\n\techo   1 > /sys/class/tacho-motor/outA:motor:tacho/run\r\n\r\nThis enables third-party developers to write EV3 bindings for any programming language that has a file system IO API.\r\n\r\nGoEV3 provides EV3 bindings for [Google Go](http://golang.org) (golang), allowing developers to take advantage of Go's modern syntax and extensive standard library to program Mindstorms robots.\r\n\r\nGetting Started\r\n---------------\r\n\r\n### ev3dev\r\n\r\nFirst, we need to install ev3dev onto a Micro SD card (by using an SD card, we can keep EV3's built-in software intact). Instructions for the installation process can be found on [ev3dev's wiki](https://github.com/mindboards/ev3dev/wiki/Getting-started-v2). When you're done, reboot your EV3 and make sure you can ssh into it from your computer.\r\n\r\n### Google Go\r\n\r\nNext, we need to install an ARMv5 build of Google Go. Fortunately for us, Go developer Dave Cheney released [builds](http://dave.cheney.net/unofficial-arm-tarballs) of Go for various ARM architectures. On your computer, download the latest ARMv5 package (1.2 as of this writing). Once the download completes, transfer it to the EV3 over ssh using [scp](http://en.wikipedia.org/wiki/Secure_copy):\r\n\r\n\tscp /path/to/go1.2.linux-arm~armv5-1.tar.gz root@192.168.3.2:~/go.tar.gz\r\n\r\nBe sure to replace `192.168.3.2` with your EV3's IP address. Now we can ssh into the EV3 and extract the archive to its final destination:\r\n\r\n\tcd /usr/local\r\n\ttar -xf ~/go.tar.gz\r\n\r\nExtraction may take a few minutes. Once it's done, we'll add Go's `bin` directory to our shell's path:\r\n\r\n\techo \"export PATH=\\$PATH:/usr/local/go/bin\" >> ~/.bashrc\r\n\tsource ~/.bashrc\r\n\r\nWe should now be able to invoke the `go` tool like so:\r\n\r\n\troot@ev3dev:~# go version\r\n\tgo version go1.2 linux/arm\r\n\r\n### GoEV3\r\n\r\nNow that we have Google Go up and running, we need to install GoEV3. First, let's set up our Go workspace:\r\n\r\n\tcd ~\r\n\tmkdir gocode\r\n\techo \"export GOPATH=\\$HOME/gocode\" >> ~/.bashrc\r\n\tsource ~/.bashrc\r\n\r\nWe can obtain GoEV3 from its GitHub repository. Be sure to have internet connection sharing enabled prior to running the following commands:\r\n\r\n\tmkdir -p gocode/src/github.com/mattrajca\r\n\tcd gocode/src/github.com/mattrajca\r\n\twget -O GoEV3.tar.gz --no-check-certificate https://github.com/mattrajca/GoEV3/archive/master.tar.gz\r\n\ttar -xf GoEV3.tar.gz\r\n\tmv GoEV3-master GoEV3\r\n\trm GoEV3.tar.gz\r\n\tcd ~\r\n\r\nNote we're not using `go get` to avoid installing `git` on the EV3.\r\n\r\nGoEV3 comes with a sample program that lets us exercise EV3's various hardware capabilities. We can now run it with the following commands:\r\n\r\n\tgo build github.com/mattrajca/GoEV3\r\n\tgocode/bin/GoEV3\r\n\r\nChoose mode `6. Motors`, plug in a motor to output port A, and watch it turn! Feel free to explore the other modes.\r\n\r\nYour First Program\r\n------------------\r\n\r\nWe'll now write a short Go program that drives a robot forward as long as there are no obstacles. To do this, we'll take advantage of the Sensors and Motor APIs.\r\n\r\nFirst, let's create a new package, `example1`.\r\n\r\n\tmkdir ~/gocode/src/example1\r\n\tcd ~/gocode/src/example1\r\n\tnano main.go\r\n\r\nNow paste in the following code:\r\n\r\n\tpackage main\r\n\t\r\n\timport (\r\n\t\t\"github.com/mattrajca/GoEV3/Motor\"\r\n\t\t\"github.com/mattrajca/GoEV3/Sensors\"\r\n\t\t\"time\"\r\n\t)\r\n\t\r\n\tfunc main() {\r\n\t\tsensor := Sensors.FindInfraredSensor(Sensors.InPort2)\r\n\t\t\r\n\t\tMotor.Run(Motor.OutPortA, 40)\r\n\t\tMotor.Run(Motor.OutPortB, 40)\r\n\t\t\r\n\t\tfor {\r\n\t\t\tvalue := sensor.ReadProximity()\r\n\t\t\t\r\n\t\t\tif value < 50 {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttime.Sleep(time.Millisecond * 100)\r\n\t\t}\r\n\t\t\r\n\t\tMotor.Stop(Motor.OutPortA)\r\n\t\tMotor.Stop(Motor.OutPortB)\r\n\t}\r\n\r\nThis code assumes we have an infrared sensor attached to input port 2 and two motors attached to output ports A and B.\r\n\r\nTo run the program, save the file, exit nano, and execute the following command:\r\n\r\n\tgo run main.go\r\n\r\nThe motors on ports A and B will start turning. To stop them, simply extend your hand in front of the infrared sensor.\r\n\r\nIf you prefer writing and compiling Go programs on your computer, you can [cross-compile](http://dave.cheney.net/2012/09/08/an-introduction-to-cross-compilation-with-go) an ARMv5 binary and transfer it to the EV3 over scp.\r\n\r\nDocumentation\r\n-------------\r\n\r\nComplete documentation for GoEV3 can be found on [godoc](https://godoc.org/github.com/mattrajca/GoEV3).\r\n\r\nWireless Connectivity\r\n---------------------\r\n\r\nSince attaching the USB cable isn't always convenient, instructions for setting up Wi-Fi access can be found [here](https://github.com/mindboards/ev3dev/wiki/Setting-Up-wifi-Networking).\r\n\r\nThread Safety\r\n-------------\r\n\r\nAll of GoEV3 is thread-safe.\r\n\r\nContributing\r\n------------\r\n\r\nGoEV3 is still in its early stages and subject to API changes as the ev3dev project evolves. Filing issues and submitting pull requests are the two best ways to get involved. Documentation improvements, new APIs, example programs, and bug fixes are all welcome.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}